// <auto-generated />
using System;
using DCartWeb.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DCartWeb.Migrations
{
    [DbContext(typeof(DCartWebContext))]
    [Migration("20221014114100_UpdatedCartField")]
    partial class UpdatedCartField
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DCartWeb.Models.Carts.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("SessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("TotalPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("DCartWeb.Models.Carts.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUppdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("QuantityInCart")
                        .HasColumnType("int");

                    b.Property<int>("QuantityInStock")
                        .HasColumnType("int");

                    b.Property<int>("SubCategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("DCartWeb.Models.Orders.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerFirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerLastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PaymentId")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("TotalAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("DCartWeb.Models.Orders.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUppdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("QuantityInCart")
                        .HasColumnType("int");

                    b.Property<int>("SubCategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("DCartWeb.Models.Products.MainCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PosterImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MainCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateAdded = new DateTime(2022, 10, 14, 11, 40, 59, 828, DateTimeKind.Utc).AddTicks(4758),
                            Name = "Electronics",
                            PosterImageUrl = "Images/Categories/electronics.jpg"
                        },
                        new
                        {
                            Id = 2,
                            DateAdded = new DateTime(2022, 10, 14, 11, 40, 59, 828, DateTimeKind.Utc).AddTicks(4761),
                            Name = "Furnitures",
                            PosterImageUrl = "Images/Categories/furniture.jpg"
                        },
                        new
                        {
                            Id = 3,
                            DateAdded = new DateTime(2022, 10, 14, 11, 40, 59, 828, DateTimeKind.Utc).AddTicks(4763),
                            Name = "Toys",
                            PosterImageUrl = "Images/Categories/toys.jpg"
                        });
                });

            modelBuilder.Entity("DCartWeb.Models.Products.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("bit");

                    b.Property<string>("PosterImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ProductPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("QuantityInStock")
                        .HasColumnType("int");

                    b.Property<int>("SubCategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SubCategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateAdded = new DateTime(2022, 10, 14, 11, 40, 59, 828, DateTimeKind.Utc).AddTicks(5006),
                            IsFeatured = true,
                            PosterImageUrl = "Images/Products/dellxps.png",
                            ProductName = "Dell XPS",
                            ProductPrice = 17567m,
                            QuantityInStock = 23,
                            SubCategoryId = 1
                        },
                        new
                        {
                            Id = 2,
                            DateAdded = new DateTime(2022, 10, 14, 11, 40, 59, 828, DateTimeKind.Utc).AddTicks(5009),
                            IsFeatured = true,
                            PosterImageUrl = "Images/Products/microsoft-surface.png",
                            ProductName = "Microsoft Surface",
                            ProductPrice = 23890m,
                            QuantityInStock = 12,
                            SubCategoryId = 1
                        },
                        new
                        {
                            Id = 3,
                            DateAdded = new DateTime(2022, 10, 14, 11, 40, 59, 828, DateTimeKind.Utc).AddTicks(5011),
                            IsFeatured = true,
                            PosterImageUrl = "Images/Products/panasonic-tv.png",
                            ProductName = "Panasonic 4k TV",
                            ProductPrice = 29349m,
                            QuantityInStock = 6,
                            SubCategoryId = 2
                        },
                        new
                        {
                            Id = 4,
                            DateAdded = new DateTime(2022, 10, 14, 11, 40, 59, 828, DateTimeKind.Utc).AddTicks(5013),
                            IsFeatured = true,
                            PosterImageUrl = "Images/Products/sony-lcd-tv.png",
                            ProductName = "Sony LCD TV",
                            ProductPrice = 18945m,
                            QuantityInStock = 13,
                            SubCategoryId = 2
                        },
                        new
                        {
                            Id = 5,
                            DateAdded = new DateTime(2022, 10, 14, 11, 40, 59, 828, DateTimeKind.Utc).AddTicks(5014),
                            IsFeatured = false,
                            PosterImageUrl = "Images/Products/ikea-chair.png",
                            ProductName = "Ikea Chair",
                            ProductPrice = 129m,
                            QuantityInStock = 239,
                            SubCategoryId = 3
                        },
                        new
                        {
                            Id = 6,
                            DateAdded = new DateTime(2022, 10, 14, 11, 40, 59, 828, DateTimeKind.Utc).AddTicks(5016),
                            IsFeatured = false,
                            PosterImageUrl = "Images/Products/ikea-soft-chair.png",
                            ProductName = "Ikea Soft Chair",
                            ProductPrice = 429m,
                            QuantityInStock = 64,
                            SubCategoryId = 3
                        },
                        new
                        {
                            Id = 7,
                            DateAdded = new DateTime(2022, 10, 14, 11, 40, 59, 828, DateTimeKind.Utc).AddTicks(5018),
                            IsFeatured = true,
                            PosterImageUrl = "Images/Products/ikea-table.png",
                            ProductName = "Ikea Table",
                            ProductPrice = 349m,
                            QuantityInStock = 123,
                            SubCategoryId = 4
                        },
                        new
                        {
                            Id = 8,
                            DateAdded = new DateTime(2022, 10, 14, 11, 40, 59, 828, DateTimeKind.Utc).AddTicks(5020),
                            IsFeatured = false,
                            PosterImageUrl = "Images/Products/ikea-glass-table.png",
                            ProductName = "Ikea Glass Table",
                            ProductPrice = 439m,
                            QuantityInStock = 123,
                            SubCategoryId = 4
                        },
                        new
                        {
                            Id = 9,
                            DateAdded = new DateTime(2022, 10, 14, 11, 40, 59, 828, DateTimeKind.Utc).AddTicks(5021),
                            IsFeatured = false,
                            PosterImageUrl = "Images/Products/action-figure.png",
                            ProductName = "Action Figure",
                            ProductPrice = 599m,
                            QuantityInStock = 38,
                            SubCategoryId = 5
                        },
                        new
                        {
                            Id = 10,
                            DateAdded = new DateTime(2022, 10, 14, 11, 40, 59, 828, DateTimeKind.Utc).AddTicks(5023),
                            IsFeatured = false,
                            PosterImageUrl = "Images/Products/toy-story-collection.png",
                            ProductName = "Ikea Table",
                            ProductPrice = 349m,
                            QuantityInStock = 12,
                            SubCategoryId = 5
                        },
                        new
                        {
                            Id = 11,
                            DateAdded = new DateTime(2022, 10, 14, 11, 40, 59, 828, DateTimeKind.Utc).AddTicks(5025),
                            IsFeatured = false,
                            PosterImageUrl = "Images/Products/doll.png",
                            ProductName = "Dolly The Doll",
                            ProductPrice = 659m,
                            QuantityInStock = 457,
                            SubCategoryId = 6
                        },
                        new
                        {
                            Id = 12,
                            DateAdded = new DateTime(2022, 10, 14, 11, 40, 59, 828, DateTimeKind.Utc).AddTicks(5026),
                            IsFeatured = true,
                            PosterImageUrl = "Images/Products/toy-story-doll.png",
                            ProductName = "Toy Story Doll",
                            ProductPrice = 189m,
                            QuantityInStock = 21,
                            SubCategoryId = 6
                        });
                });

            modelBuilder.Entity("DCartWeb.Models.Products.SubCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("MainCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PosterImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MainCategoryId");

                    b.ToTable("SubCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateAdded = new DateTime(2022, 10, 14, 11, 40, 59, 828, DateTimeKind.Utc).AddTicks(4890),
                            MainCategoryId = 1,
                            Name = "Computers",
                            PosterImageUrl = "/Images/SubCategories/computers.png"
                        },
                        new
                        {
                            Id = 2,
                            DateAdded = new DateTime(2022, 10, 14, 11, 40, 59, 828, DateTimeKind.Utc).AddTicks(4892),
                            MainCategoryId = 1,
                            Name = "Tvs",
                            PosterImageUrl = "/Images/SubCategories/tv.png"
                        },
                        new
                        {
                            Id = 3,
                            DateAdded = new DateTime(2022, 10, 14, 11, 40, 59, 828, DateTimeKind.Utc).AddTicks(4894),
                            MainCategoryId = 2,
                            Name = "Chairs",
                            PosterImageUrl = "/Images/SubCategories/chair.png"
                        },
                        new
                        {
                            Id = 4,
                            DateAdded = new DateTime(2022, 10, 14, 11, 40, 59, 828, DateTimeKind.Utc).AddTicks(4896),
                            MainCategoryId = 2,
                            Name = "Tables",
                            PosterImageUrl = "/Images/SubCategories/table.png"
                        },
                        new
                        {
                            Id = 5,
                            DateAdded = new DateTime(2022, 10, 14, 11, 40, 59, 828, DateTimeKind.Utc).AddTicks(4925),
                            MainCategoryId = 3,
                            Name = "Action Figures",
                            PosterImageUrl = "/Images/SubCategories/toys.png"
                        },
                        new
                        {
                            Id = 6,
                            DateAdded = new DateTime(2022, 10, 14, 11, 40, 59, 828, DateTimeKind.Utc).AddTicks(4927),
                            MainCategoryId = 3,
                            Name = "Dolls",
                            PosterImageUrl = "/Images/SubCategories/dolls.png"
                        });
                });

            modelBuilder.Entity("DCartWeb.Models.Users.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "6c2e174e-1b0e-416f-83af-483d56fd7212",
                            ConcurrencyStamp = "6e3c90ec-e0df-4d85-866d-afb5f72ddb80",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2c5e174e-3b0e-446f-86af-483d56fd7210",
                            ConcurrencyStamp = "257f74b1-c3c6-4187-8a41-5e3cdfaaca6d",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "3a3e134a-2c3a-446f-86af-112d26fd2890",
                            RoleId = "6c2e174e-1b0e-416f-83af-483d56fd7212"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DCartWeb.Models.Users.User", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("ProfilePicture")
                        .HasColumnType("varbinary(max)");

                    b.HasDiscriminator().HasValue("User");

                    b.HasData(
                        new
                        {
                            Id = "3a3e134a-2c3a-446f-86af-112d26fd2890",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1c53474e-d7d1-498e-b328-912ffd0d023a",
                            Email = "admin.dcartapp@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN.DCARTAPP@GMAIL.COM",
                            NormalizedUserName = "ADMIN.DCARTAPP@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEI82wwP2Ud3r++teusGM5lJqjfIQWv2oabIYVlbHznWpzH/DGv6dVWpONjJe2J2uhA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "77655857-cc16-4604-af4f-93ecc7f35bb0",
                            TwoFactorEnabled = false,
                            UserName = "admin.dcartapp@gmail.com",
                            DateAdded = new DateTime(2022, 10, 14, 13, 40, 59, 828, DateTimeKind.Local).AddTicks(5118),
                            FirstName = "Admin",
                            LastName = "Admin"
                        });
                });

            modelBuilder.Entity("DCartWeb.Models.Carts.CartItem", b =>
                {
                    b.HasOne("DCartWeb.Models.Carts.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");
                });

            modelBuilder.Entity("DCartWeb.Models.Orders.OrderItem", b =>
                {
                    b.HasOne("DCartWeb.Models.Orders.Order", "Cart")
                        .WithMany("OrderItem")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");
                });

            modelBuilder.Entity("DCartWeb.Models.Products.Product", b =>
                {
                    b.HasOne("DCartWeb.Models.Products.SubCategory", "SubCategory")
                        .WithMany("Products")
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("DCartWeb.Models.Products.SubCategory", b =>
                {
                    b.HasOne("DCartWeb.Models.Products.MainCategory", "MainCategory")
                        .WithMany("SubCategories")
                        .HasForeignKey("MainCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MainCategory");
                });

            modelBuilder.Entity("DCartWeb.Models.Users.Address", b =>
                {
                    b.HasOne("DCartWeb.Models.Users.User", "User")
                        .WithOne("Address")
                        .HasForeignKey("DCartWeb.Models.Users.Address", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DCartWeb.Models.Carts.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("DCartWeb.Models.Orders.Order", b =>
                {
                    b.Navigation("OrderItem");
                });

            modelBuilder.Entity("DCartWeb.Models.Products.MainCategory", b =>
                {
                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("DCartWeb.Models.Products.SubCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("DCartWeb.Models.Users.User", b =>
                {
                    b.Navigation("Address");
                });
#pragma warning restore 612, 618
        }
    }
}
